import chess
import chess.engine
import os
from Engine.engine import Engine  # ƒê·∫£m b·∫£o b·∫°n c√≥ l·ªõp Engine trong engine.py

# ==== C·∫§U H√åNH ====
STOCKFISH_PATH = "C:/Users/VUONG/TTNT7.2/Engine/stockfish/stockfish.exe"
STOCKFISH_ELO = 1320  # M·ª©c ƒë·ªô "y·∫øu" c·ªßa Stockfish ƒë·ªÉ bot d·ªÖ test h∆°n
STOCKFISH_DEPTH = 1  # Gi·ªõi h·∫°n ƒë·ªô s√¢u t√≠nh to√°n c·ªßa Stockfish
BOT_DEPTH = 3        # ƒê·ªô s√¢u c·ªßa bot
NUM_GAMES = 10       # S·ªë v√°n ƒë·ªÉ ƒë√°nh gi√°
SHOW_MOVES = False   # In ra t·ª´ng n∆∞·ªõc ƒëi

# ==== KI·ªÇM TRA FILE ====
if not os.path.exists(STOCKFISH_PATH):
    raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y Stockfish t·∫°i: {STOCKFISH_PATH}")

# ==== H√ÄM CH∆†I 1 V√ÅN ====
def play_game(bot_as_white=True, bot_depth=5, stockfish_elo=1350, show_moves=True):
    board = chess.Board()
    bot = Engine(depth=bot_depth)

    with chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH) as stockfish:
        stockfish.configure({
            "UCI_LimitStrength": True,
            "UCI_Elo": stockfish_elo
        })

        move_count = 1
        while not board.is_game_over():
            is_bot_turn = (board.turn == chess.WHITE and bot_as_white) or (board.turn == chess.BLACK and not bot_as_white)
            
            if is_bot_turn:
                # BOT ƒêI
                try:
                    bot.set_position(board.fen())
                    move_uci = bot.get_best_move()
                    if move_uci is None:
                        print("‚ùå Bot kh√¥ng c√≥ n∆∞·ªõc ƒëi!")
                        break
                    move = chess.Move.from_uci(move_uci)
                    if move not in board.legal_moves:
                        print(f"‚ùå N∆∞·ªõc ƒëi bot kh√¥ng h·ª£p l·ªá: {move_uci}")
                        break
                    board.push(move)
                    if show_moves:
                        print(f"{move_count}. ü§ñ Bot ƒëi: {move_uci}")
                except Exception as e:
                    print(f"‚ùå L·ªói khi bot ƒëi: {e}")
                    break
            else:
                # STOCKFISH ƒêI
                try:
                    result = stockfish.play(board, chess.engine.Limit(depth=STOCKFISH_DEPTH))
                    board.push(result.move)
                    if show_moves:
                        print(f"{move_count}. üêü Stockfish ƒëi: {result.move.uci()}")
                except Exception as e:
                    print(f"‚ùå L·ªói khi Stockfish ƒëi: {e}")
                    break

            if show_moves:
                print(board, "\n")
            move_count += 1

        return board.result()

# ==== H√ÄM ƒê√ÅNH GI√Å BOT ====
def evaluate_bot(num_games=10, bot_depth=4, stockfish_elo=800):
    wins = 0
    draws = 0
    losses = 0

    for i in range(num_games):
        bot_as_white = (i % 2 == 0)
        print(f"\nüîÅ V√°n {i + 1}/{num_games} | Bot ch∆°i {'Tr·∫Øng' if bot_as_white else 'ƒêen'}")
        result = play_game(bot_as_white=bot_as_white, bot_depth=bot_depth, stockfish_elo=stockfish_elo, show_moves=SHOW_MOVES)

        if result == "1-0":
            if bot_as_white:
                wins += 1
                print("‚úÖ Bot th·∫Øng (Tr·∫Øng)")
            else:
                losses += 1
                print("‚ùå Bot thua (ƒêen)")
        elif result == "0-1":
            if bot_as_white:
                losses += 1
                print("‚ùå Bot thua (Tr·∫Øng)")
            else:
                wins += 1
                print("‚úÖ Bot th·∫Øng (ƒêen)")
        else:
            draws += 1
            print("ü§ù H√≤a")

    # ==== T·ªîNG K·∫æT ====
    print("\nüìä --- T·ªïng k·∫øt ---")
    print(f"Th·∫Øng: {wins}, H√≤a: {draws}, Thua: {losses}")
    score = (wins + 0.5 * draws) / num_games
    print(f"T·ª∑ l·ªá hi·ªáu su·∫•t: {score * 100:.1f}%")

    if score in [0, 1]:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng ELO (to√†n th·∫Øng ho·∫∑c to√†n thua).")
    else:
        elo_diff = -400 * (score - 0.5) / (0.5 - score)
        print(f"üìà ∆Ø·ªõc l∆∞·ª£ng ch√™nh l·ªách ELO so v·ªõi Stockfish Elo {stockfish_elo}: ~{int(elo_diff)}")

# ==== CH·∫†Y CH√çNH ====
if __name__ == "__main__":
    evaluate_bot(num_games=NUM_GAMES, bot_depth=BOT_DEPTH, stockfish_elo=STOCKFISH_ELO)
